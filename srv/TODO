BEFORE REDIS 1.0.0-rc1

 * Add number of keys for every DB in INFO
 * maxmemory support
 * Resize the expires and Sets hash tables if needed as well? For Sets the right moment to check for this is probably in SREM
 * What happens if the saving child gets killed or segfaults instead of ending normally? Handle this.
 * check 'server.dirty' everywere. Make it proprotional to the number of objects modified.
 * Shutdown must kill other background savings before to start saving. Otherwise the DB can get replaced by the child that rename(2) after the parent for some reason. Child should trap the signal and remove the temp file name.
 * Objects sharing configuration, add the directive `objectsharingpool <size>`
 * Make sure to convert all the fstat() calls to 64bit versions.
 * Cover most of the source code with test-redis.tcl

AFTER 1.0 stable release

 * Consistent hashing implemented in all the client libraries having an user base
 * SORT: Don't copy the list into a vector when BY argument is constant.
 * SORT ... STORE keyname. Instead to return the SORTed data set it into key.
 * Profiling and optimization in order to limit the CPU usage at minimum
 * Write the hash table size of every db in the dump, so that Redis can resize the hash table just one time when loading a big DB.
 * Elapsed time in logs for SAVE when saving is going to take more than 2 seconds
 * LOCK / TRYLOCK / UNLOCK as described many times in the google group
 * Replication automated tests
 * some kind of sorted type, example:
        ZADD mykey foo 100
        ZADD mykey bar 50
   ZRANGE mykey 0 1 => bar foo
   This is able to take elements sorted because a binary tree is used to store
   the elements by 'score', with the actual value being the key. On the other
   side the type also takes an hash table with key->score mapping, so that when
   there is an update we lookup the current score and can traverse the tree.
 * BITMAP type

FUTURE HINTS

- In memory compression: if in-memory values compression will be implemented, make sure to implement this so that addReply() is able to handle compressed objects, just creating an uncompressed version on the fly and adding this to the output queue instead of the original one. When insetad we need to look at the object string value (SORT BY for example), call a function that will turn the object into an uncompresed one.
